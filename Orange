# This program takes an image, applies filters with openCV, and returns
# a color target if located in the image.  The target parameters are (x,y,radius).

# Import external libraries
import cv2
import numpy as np

# Import internal programs
import L1_camera as cam

width = 120                                                 # width of image being processed (pixels)
color_range = np.array([[115, 10, 170], [150, 255, 255]])        # enter values here if running standalone program.


# This function searches an image for an object of the specified color.  Returns array containing [x, y, radius] in pixels.
def colorTarget(color_range=((115, 10, 170), (150, 255, 255))):

    image = cam.newImage()
    if filter == 'RGB':
        frame_to_thresh = image.copy()
    else:
        frame_to_thresh = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)                # convert image to hsv colorspace RENAME THIS TO IMAGE_HSV

    thresh = cv2.inRange(frame_to_thresh, color_range[0], color_range[1])
    mask = thresh

    cnts = cv2.findContours(mask.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)[-2]    # generates number of contiguous "1" pixels
    if len(cnts) == 0:                                                                      # begin processing if there are "1" pixels discovered
         idk = np.array([None, None, 0])
         return idk
    else:
        c = max(cnts, key=cv2.contourArea)                                                  # return the largest target area
        ((x, y), radius) = cv2.minEnclosingCircle(c)
        if radius > 4:
            idk = np.array([round(x, 1), round(y, 1), round(radius, 1)])
            return idk




if __name__ == "__main__":
    while True:
        orange = colorTarget(color_range)           # grab target x, y, radius
        x = orange[0]
        radius = target[2]
        if x is None:
            print("No Orange")
        else:
            print("Orange Letter Found")
